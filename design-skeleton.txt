src
    comp1110.ass2
        gui
            (C) Game
            (C) View

        game
            (E) Species
                A to F

            (E) Direction
                N,S,E,W

            (C) Card
                Class: card (String name, Species species, int number)
                Constructor: {
                    this.name
                    this.species
                    this.number
                    }
                Methods:
                    getName()
                    getSpecies()
                    getNumber()

            (I) Interface CardStack
                //Deck and discard can be treated the same
                Class: CardStack(list<card>,boolean showTopCard)

                Methods:
                    randomise()
                    drawTopCard()
                        card=this.list[last]
                        this.list[last]=null
                        return card
                    addTopCard(Card card)
                        this.list[first empty]=card
                    isEmpty(), return boolean

                (C) Class Deck extend CardStack
                    Constructor deck: {
                        for species:speciesNums
                            for int 1..8
                                list.add(New card(name, species, num))
                        randomise
                        showTopCard=false
                        }

                (C) Class DiscardPile extend CardStack
                    Constructor discard: {
                            New list<card> //empty list
                            showTopCard=true
                        }



            (C) Position
                Class: Position(int x, int y)
                Constructor: {
                    this.x
                    this.y
                    }
                Methods:
                getX()
                getY()
                getAdjacentCards(comp1110.ass2.Arboretum), return Position[] //adjacent positions which contain cards

            (C) comp1110.ass2.Arboretum
                Class: comp1110.ass2.Arboretum(int size)
                Constructor: {
                    for int i:size, int j: size
                        this.HashMap.put(Position position(i,j), Card null);
                    }
                Methods:
                addCard(Card card, position)
                ifPosCanPlace(Position), return boolean
                showCurrentCards(), return Position[]
                getCard(Position), return Card
                showAvailablePlace(), return Position[]
                mapScoreRoutes(), return Position[][] //arrays of Positions that form lowest->highest routes
                    (probably some sort of search algorithm involved here)
                calculateScore(species), return int
                resetMap()

            (C) Player (String name, comp1110.ass2.Arboretum arboretum, CardStack discard, list<card> hand)
                Constructor: {
                    this.name
                    this.arboretum=new comp1110.ass2.Arboretum
                    this.disardPile=new CardStack discard
                    this.handCards=list<card>=null
                    }
                Methods:
                getName()
                getArboretum()
                getDiscardPile() return DiscardPile
                getHandCards(), return list<card> hand
                discard(Card)
                draw(CardStack location)
                    card=location.getTopCard()
                    add card to hand
                play(card,position);
                    position.setCard(card)
                    position.findScoringRoutes(arboretum)// cant directly add to position, position is just a combination part of arboretum.
                    remove card from hand

        Event

            (C) Turn
                Class: Turn(player, deck)
                player.draw();
                player.draw();
                player.play();
                player.discard();

            (C) RightToScore(list<Player> players)
                for species:speciesNum
                    for player:players
                        get hand score
                        get contains 1, contains 8
                    update hand score for player with 8
                determine which is higher
                return player A: [scoring species], player B: [scoring species]...


            (C) getScore(player, list<species>)
                score=0
                    for species:speciesNum
                        score+=player.getArboretum.calculateScore(species)
                return score

        (C) Gameplay
            new Deck(6)
            new Player(A)
            newPlayer(B)

            while(!deck.isEmpty) {
                new Turn(playerA,deck)
                if !deck.isEmpty()
                    new Turn(playerB.deck)
            }

            if Deck.isEmpty()
                map=RightToScore(List<players>)

            for i:map
                getScore(i[0],i[1])

            Compare and find winner
